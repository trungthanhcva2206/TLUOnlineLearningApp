package com.nhom1.tlulearningonline;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.Button;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.bumptech.glide.Glide;
import com.google.android.material.bottomnavigation.BottomNavigationView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.text.Editable;
import android.text.TextWatcher;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class HomeGVActivity extends AppCompatActivity {

    private TextView tvGreeting, tvUserName;
    private EditText edtSearch;
    private ImageView ivNotification, ivAvatar;
    private TextView tvActiveCoursesCount, tvTotalStudents, tvTotalLectures, tvTotalDocuments;

    private RecyclerView recyclerFeaturedTopCoursesGV, recyclerMyCoursesGV;

    private com.nhom1.tlulearningonline.adapters.FeaturedCoursesGVAdapter featuredCoursesGVAdapter;
    private com.nhom1.tlulearningonline.adapters.MyCoursesGVAdapter myCoursesGVAdapter;
    TextView tv_user_name;
    ImageView iv_avatar;

    private List<CourseItemGV> featuredCoursesGVList = new ArrayList<>();
    private List<CourseItemGV> myCoursesGVList = new ArrayList<>();

    private BottomNavigationView bottomNavigationView;

    private Handler sessionHandler;
    private Runnable sessionCheckRunnable;


    private List<CourseItemGV> featuredCoursesGVListFull = new ArrayList<>(); // << Th√™m danh s√°ch n√†y

    private List<CourseItemGV> myCoursesGVListFull = new ArrayList<>(); // << Th√™m danh s√°ch n√†y


    private void fetchUserInfo() {
        SessionManager sessionManager = new SessionManager(this);
        String userId = sessionManager.getUserId();

        if (userId == null || userId.isEmpty()) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y userId!", Toast.LENGTH_SHORT).show();
            sessionManager.clearSession();
            Intent intent = new Intent(HomeGVActivity.this, LoginActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            startActivity(intent);
            finish();
            return;
        }
        //
        String url = "http://14.225.207.221:6060/mobile/users/" + userId;

        RequestQueue queue = Volley.newRequestQueue(this);
        Utf8StringRequest request = new Utf8StringRequest(Request.Method.GET, url,
                response -> {
                    try {
                        JSONObject user = new JSONObject(response);
                        String fullName = user.optString("fullname", "Ng∆∞·ªùi d√πng");
                        String avatarUrl = user.optString("avatar_url", "");

                        tv_user_name.setText(fullName + " üëã");

                        if (avatarUrl != null && !avatarUrl.isEmpty()) {
                            Log.d("AvatarURL", avatarUrl);
                            Glide.with(this)
                                    .load(avatarUrl)
                                    .placeholder(R.drawable.ic_avatar)
                                    .error(R.drawable.ic_avatar)
                                    .circleCrop()
                                    .into(iv_avatar);
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                        Toast.makeText(this, "L·ªói x·ª≠ l√Ω JSON!", Toast.LENGTH_SHORT).show();
                    }
                },
                error -> {
                    if (error.networkResponse != null && error.networkResponse.statusCode == 401) {
                        sessionManager.clearSession();
                        Toast.makeText(this, "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n!", Toast.LENGTH_SHORT).show();
                        Intent intent = new Intent(HomeGVActivity.this, LoginActivity.class);
                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                        startActivity(intent);
                        finish();
                    } else {
                        error.printStackTrace();
                        Toast.makeText(this, "L·ªói k·∫øt n·ªëi t·ªõi m√°y ch·ªß!", Toast.LENGTH_SHORT).show();
                    }
                }
        );

        queue.add(request);
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home_gv);
        tv_user_name = findViewById(R.id.tv_user_name);
        iv_avatar = findViewById(R.id.iv_avatar);

        // √Ånh x·∫° View
        tvGreeting = findViewById(R.id.tv_greeting);
        tvUserName = findViewById(R.id.tv_user_name);
        ivNotification = findViewById(R.id.iv_notification);
        ivAvatar = findViewById(R.id.iv_avatar);
        edtSearch = findViewById(R.id.edt_search);

        tvActiveCoursesCount = findViewById(R.id.tv_active_courses_count);
        tvTotalStudents = findViewById(R.id.tv_total_students);
        tvTotalLectures = findViewById(R.id.tv_total_lectures);
        tvTotalDocuments = findViewById(R.id.tv_total_documents);

        recyclerFeaturedTopCoursesGV = findViewById(R.id.recycler_featured_top_courses_gv);
        recyclerMyCoursesGV = findViewById(R.id.recycler_my_courses_gv);

        bottomNavigationView = findViewById(R.id.bottom_navigation);

        // Setup d·ªØ li·ªáu m·∫´u
        setupDummyData();
        fetchUserInfo();
        fetchCourses();// Uncomment ƒë·ªÉ g·ªçi API l·∫•y th√¥ng tin gi·∫£ng vi√™n
        setupSessionCheck();

        // C·∫≠p nh·∫≠t th·ªëng k√™
        updateStatistics();

        // Setup RecyclerView cho Kho√° h·ªçc n·ªïi b·∫≠t c·ªßa t√¥i
        featuredCoursesGVAdapter = new com.nhom1.tlulearningonline.adapters.FeaturedCoursesGVAdapter(featuredCoursesGVList);
        LinearLayoutManager featuredLayoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);
        recyclerFeaturedTopCoursesGV.setLayoutManager(featuredLayoutManager);
        recyclerFeaturedTopCoursesGV.setAdapter(featuredCoursesGVAdapter);

        // Setup RecyclerView cho Kho√° h·ªçc c·ªßa t√¥i
        myCoursesGVAdapter = new com.nhom1.tlulearningonline.adapters.MyCoursesGVAdapter(myCoursesGVList);
        LinearLayoutManager myCoursesLayoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);
        recyclerMyCoursesGV.setLayoutManager(myCoursesLayoutManager);
        recyclerMyCoursesGV.setAdapter(myCoursesGVAdapter);

        // X·ª≠ l√Ω s·ª± ki·ªán click
        ivNotification.setOnClickListener(v -> Toast.makeText(HomeGVActivity.this, "Th√¥ng b√°o!", Toast.LENGTH_SHORT).show());
        ivAvatar.setOnClickListener(v -> {
            Intent intent = new Intent(HomeGVActivity.this, UserProfileActivity.class);
            startActivity(intent);
        });

        edtSearch.addTextChangedListener(new TextWatcher() {
            @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
            @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
                // L·ªçc c·∫£ hai danh s√°ch
                filterFeaturedCoursesGV(s.toString());
            }
            @Override public void afterTextChanged(Editable s) {}
        });

        bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                int itemId = item.getItemId();
                if (itemId == R.id.nav_home) {
                    // Already on HomeGV, do nothing
                    return true;
                } else if (itemId == R.id.nav_forum) {
                    Intent intent = new Intent(HomeGVActivity.this, GroupChatActivity.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                    startActivity(intent);
                    return true;
                } else if (itemId == R.id.nav_courses) {
                    Intent intent = SessionManager.getCoursesActivityIntent(HomeGVActivity.this); // Use helper
                    intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                    startActivity(intent);
                    return true;
                } else if (itemId == R.id.nav_profile) {
                    Intent intent = new Intent(HomeGVActivity.this, UserProfileActivity.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                    startActivity(intent);
                    return true;
                }
                return false;
            }
        });
        bottomNavigationView.setSelectedItemId(R.id.nav_home);
    }

    private void updateStatistics() {
        // C·∫≠p nh·∫≠t c√°c TextView th·ªëng k√™ t·ª´ d·ªØ li·ªáu ho·∫∑c API
        tvActiveCoursesCount.setText(String.valueOf(3)); // L·∫•y t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
        tvTotalStudents.setText(String.valueOf(200));   // L·∫•y t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
        tvTotalLectures.setText(String.valueOf(60));    // L·∫•y t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
        tvTotalDocuments.setText(String.valueOf(70));   // L·∫•y t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
    }


    private void setupSessionCheck() {
        sessionHandler = new Handler(Looper.getMainLooper());
        sessionCheckRunnable = () -> {
            SessionManager sessionManager = new SessionManager(HomeGVActivity.this);
            if (!sessionManager.isLoggedIn()) {
                Toast.makeText(HomeGVActivity.this, "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n!", Toast.LENGTH_SHORT).show();
                Intent intent = new Intent(HomeGVActivity.this, LoginActivity.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                startActivity(intent);
                finish();
            } else {
                sessionHandler.postDelayed(sessionCheckRunnable, 10000); // 10 gi√¢y ki·ªÉm tra l·∫°i
            }
        };
        sessionHandler.postDelayed(sessionCheckRunnable, 10000); // b·∫Øt ƒë·∫ßu sau 10 gi√¢y
    }

    /**
     * T·∫°o d·ªØ li·ªáu m·∫´u cho c√°c danh s√°ch kh√≥a h·ªçc n·ªïi b·∫≠t v√† kh√≥a h·ªçc c·ªßa t√¥i.
     */
    private void setupDummyData() {
        featuredCoursesGVList.clear();
        myCoursesGVList.clear();

        featuredCoursesGVList.add(new CourseItemGV("Thi·∫øt k·∫ø v√† ph√°t tri·ªÉn game",
                "M√¥n Thi·∫øt k·∫ø v√† Ph√°t tri·ªÉn Game s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t·ª´ √Ω t∆∞·ªüng ƒë·∫øn s·∫£n ph·∫©m game...", 15));
        featuredCoursesGVList.add(new CourseItemGV("Tr√≠ tu·ªá nh√¢n t·∫°o n√¢ng cao",
                "Ti·∫øp c·∫≠n c√°c thu·∫≠t to√°n AI ph·ª©c t·∫°p v√† ·ª©ng d·ª•ng th·ª±c t·∫ø.", 25));

        myCoursesGVList.add(new CourseItemGV("Thu·∫≠t to√°n ·ª©ng d·ª•ng",
                "M√¥n Thu·∫≠t to√°n ·ª®ng d·ª•ng trang b·ªã cho b·∫°n ki·∫øn th·ª©c v√† k·ªπ nƒÉng x√¢y d·ª±ng gi·∫£i ph√°p hi·ªáu qu·∫£ cho c√°c b√†i to√°n th·ª±c t·∫ø.", 15));
        myCoursesGVList.add(new CourseItemGV("C√¥ng ngh·ªá ƒëa ph∆∞∆°ng ti·ªán",
                "Chuy√™n ƒë·ªÅ v·ªÅ c√¥ng ngh·ªá ƒëa ph∆∞∆°ng ti·ªán l√† c∆° h·ªôi ƒë·ªÉ b·∫°n c·∫≠p nh·∫≠t nh·ªØng lƒ©nh v·ª±c c√¥ng ngh·ªá th√¥ng tin m·ªõi nh·∫•t.", 20));
        myCoursesGVList.add(new CourseItemGV("H·ªá th·ªëng th√¥ng tin qu·∫£n l√Ω",
                "T√¨m hi·ªÉu v·ªÅ c√°ch x√¢y d·ª±ng v√† qu·∫£n l√Ω c√°c h·ªá th·ªëng th√¥ng tin trong t·ªï ch·ª©c.", 18));
    }

    // --- TH√äM C√ÅC PH∆Ø∆†NG TH·ª®C L·ªåC ---
    private void filterFeaturedCoursesGV(String text) {
        List<CourseItemGV> filteredList = new ArrayList<>();
        for (CourseItemGV item : featuredCoursesGVListFull) {
            if (item.getTitle().toLowerCase().contains(text.toLowerCase())) {
                filteredList.add(item);
            }
        }
        featuredCoursesGVAdapter.filterList(filteredList);
    }


    private void fetchCourses() {
        SessionManager sm = new SessionManager(this);
        String userId = sm.getUserId();
        if (userId == null) return; // ho·∫∑c x·ª≠ l√Ω logout

        RequestQueue queue = Volley.newRequestQueue(this);

        // 1. L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc
        String urlCourses = "http://14.225.207.221:6060/mobile/courses";
        StringRequest reqCourses = new Utf8StringRequest(Request.Method.GET, urlCourses,
                coursesResponse -> {
                    try {
                        JSONArray coursesArr = new JSONArray(coursesResponse);

                        // 2. G·ªçi ti·∫øp API ƒë·ªÉ l·∫•y b√†i gi·∫£ng
                        String urlLessons = "http://14.225.207.221:6060/mobile/lessons";
                        StringRequest reqLessons = new Utf8StringRequest(Request.Method.GET, urlLessons,
                                lessonsResponse -> {
                                    try {
                                        JSONArray lessonsArr = new JSONArray(lessonsResponse);

                                        // ƒê·∫øm s·ªë b√†i gi·∫£ng theo courseId
                                        Map<String,Integer> lessonCountMap = new HashMap<>();
                                        for (int i = 0; i < lessonsArr.length(); i++) {
                                            JSONObject l = lessonsArr.getJSONObject(i);
                                            String cId = l.optString("courseId");
                                            lessonCountMap.put(cId, lessonCountMap.getOrDefault(cId, 0) + 1);
                                        }

                                        // Xo√° danh s√°ch c≈©
                                        featuredCoursesGVList.clear();
                                        myCoursesGVList.clear();
                                        featuredCoursesGVListFull.clear(); // << X√≥a
                                        myCoursesGVListFull.clear();

                                        // 3. L·∫∑p qua t·∫•t c·∫£ c√°c kh√≥a h·ªçc
                                        for (int i = 0; i < coursesArr.length(); i++) {
                                            JSONObject c = coursesArr.getJSONObject(i);

                                            String id     = c.getString("id");
                                            String title  = c.getString("title");
                                            String desc   = c.getString("description");
                                            String tId    = c.getString("teacherId");
                                            int count     = lessonCountMap.getOrDefault(id, 0);

                                            CourseItemGV item = new CourseItemGV(title, desc, count);

                                            // ‚úÖ Th√™m v√†o danh s√°ch featured (t·∫•t c·∫£ c√°c kh√≥a h·ªçc)
                                            featuredCoursesGVList.add(item);
                                            featuredCoursesGVListFull.add(item);

                                            // ‚úÖ N·∫øu l√† c·ªßa gi·∫£ng vi√™n hi·ªán t·∫°i th√¨ th√™m v√†o danh s√°ch c·ªßa t√¥i
                                            if (userId.equals(tId)) {
                                                myCoursesGVList.add(item);
                                                myCoursesGVListFull.add(item);
                                            }
                                        }

                                        // Th√¥ng b√°o adapter c·∫≠p nh·∫≠t UI
                                        featuredCoursesGVAdapter.notifyDataSetChanged();
                                        myCoursesGVAdapter.notifyDataSetChanged();

                                        // C·∫≠p nh·∫≠t s·ªë li·ªáu th·ªëng k√™
                                        tvActiveCoursesCount.setText(String.valueOf(myCoursesGVList.size()));
                                        tvTotalLectures.setText(String.valueOf(lessonCountMap.size()));

                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                    }
                                },
                                error -> Toast.makeText(this, "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch b√†i h·ªçc", Toast.LENGTH_SHORT).show()
                        );

                        queue.add(reqLessons);

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                },
                error -> Toast.makeText(this, "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch kh√≥a h·ªçc", Toast.LENGTH_SHORT).show()
        );

        queue.add(reqCourses);
    }



}
